plugins {
    id 'base'
}

ext.packageJson = file('package.json')
ext.testDataSrcDir = file('src/test/data')
ext.testDir = "${buildDir}/test"
ext.testSiblingDir = "${buildDir}/test-sibling"
ext.devTestDir = "${buildDir}/devTest"
ext.dataTimestampsFile = file('src/test/meta/data_times.txt')

def getNPMPackageVer() {
    return new groovy.json.JsonSlurper().parseText(packageJson.text).version
}

def copyWithTimestamps(src, dst, timestampsFile) {
    mkdir dst
    // for some reason Gradle copy fails for files with extended unicode symbols in the name
    exec {
        commandLine 'cp', '-r', src.toString() + '/.', dst
    }
    exec {
        commandLine 'bash', file('src/test/scripts/reset_data_times.sh'), timestampsFile, dst
    }
}

def injectJS(php) {
    def js = file("${buildDir}/main.js").text
    return php.replace('\'//JS_SCRIPT_IN_PHP\'', '\n<<<\'JS_SCRIPT_IN_PHP\'\n' + js + '\nJS_SCRIPT_IN_PHP\n')
}

def injectAssets(php) {
    def assets = ''
    file('assets').listFiles().each { file ->
        assets += '\n\'' + file.name.lastIndexOf('.').with{ it != -1 ? file.name.substring(0, it) : file.name } + '\' => \'' + file.bytes.encodeBase64() + '\','
    }
    return php.replaceFirst('\\s*// ASSETS_IN_PHP', assets)
}

clean.doFirst {
    // for some reason Gradle delete fails for files with extended unicode symbols in the name
    exec {
        commandLine 'rm', '-rf', buildDir
    }
}

task updateNPMPackageVer() {
    doLast() {
        def oldVer = getNPMPackageVer()
        def newPackageConfig = packageJson.text.replaceFirst("\"${oldVer}\"", "\"${version}\"")
        // confirm we replaced the correct thing
        if (new groovy.json.JsonSlurper().parseText(newPackageConfig).version != version) {
            throw new GradleException('Failed to update NPM package version. Please update manually or move the version attribute to the top of package.json.')
        }
        packageJson.text = newPackageConfig
    }
}

task runWebpack() {
    inputs.dir(file('src/main/js'))
    inputs.dir(file('src/main/css'))
    inputs.files(fileTree(dir: projectDir, include: '*.json'))
    inputs.files(file('webpack.config.js'))
    outputs.files(file("${buildDir}/main.js"))

    doLast {
        if (getNPMPackageVer() != version) {
            throw new GradleException('The version in package.json does not match the version of the Gradle build.')
        }
        exec {
            environment NODE_ENV: 'production'
            workingDir projectDir
            commandLine 'npm', 'run', 'build'
        }
    }
}

task assemblePHP(dependsOn: runWebpack) {
    inputs.files(file('src/main/php/wag.php'))
    inputs.files(file("${buildDir}/main.js"))
    inputs.files(fileTree(dir: file('assets')))
    outputs.files(file("${buildDir}/wag.php"))

    doLast {
        def php = file('src/main/php/wag.php').text
        file("${buildDir}/wag.php").text = injectJS(injectAssets(php))
    }
}

assemble.dependsOn assemblePHP

task prepareTest(dependsOn: assemble) {
    doLast {
        // for some reason Gradle delete fails for files with extended unicode symbols in the name
        exec {
            commandLine 'rm', '-rf', testDir
        }
        delete testSiblingDir
        copyWithTimestamps(testDataSrcDir, testDir, dataTimestampsFile)
        copy {
            from "${buildDir}/wag.php"
            into testDir
        }
        mkdir testSiblingDir
        copy {
            from "${testDir}/image.jpg"
            into testSiblingDir
        }
    }
}

task runMetaGen(dependsOn: prepareTest) {
    doLast {
        exec {
            commandLine 'python3', file('src/main/python/wagmetagen.py'), testDir
        }
    }
}

task testMetaGen(dependsOn: runMetaGen) {
    doLast {
        exec {
            commandLine 'python3', file('src/test/python/assert_same_meta.py'), file('src/test/meta/expected'), file("${testDir}/.wag")
        }
    }
}

task testPHP(dependsOn: runMetaGen) {
    doLast {
        exec {
            commandLine 'python3', file('src/test/python/test_php.py'), testDir
        }
    }
}

check.dependsOn(testMetaGen, testPHP)

task setupDevTest() {
    doLast {
        copyWithTimestamps(testDataSrcDir, devTestDir, dataTimestampsFile)
        copy {
            from file('test')
            into devTestDir
        }
        copy {
            from "${devTestDir}/index.html"
            into buildDir
        }
    }
}

task regenTestMeta() {
    doLast {
        exec {
            commandLine 'python3', file('src/main/python/wagmetagen.py'), devTestDir
        }
    }
}

task regenTestPHP() {
    doLast {
        copy {
            from "${projectDir}/src/main/php/wag.php"
            into devTestDir
        }
        def testPHP = file("${devTestDir}/wag.php")
        testPHP.text = '<?php\nheader("Access-Control-Allow-Origin: *");\nputenv("WAG_API_SERVER=http://localhost:3000");\n//' + injectAssets(testPHP.text)
    }
}
